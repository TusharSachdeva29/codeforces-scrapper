"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/potd";
exports.ids = ["pages/api/potd"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/potd.js":
/*!***************************!*\
  !*** ./pages/api/potd.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_gemini__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/gemini */ \"(api)/./utils/gemini.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const { rating , handle  } = req.body;\n        console.log(\"Received request:\", {\n            rating,\n            handle\n        });\n        const normalizedRating = Math.min(1600, Math.max(800, Math.round(rating / 100) * 100));\n        console.log(\"Normalized rating:\", normalizedRating);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        // Get today's problem for this rating\n        const problem = await prisma.ratingProblem.findFirst({\n            where: {\n                rating: normalizedRating,\n                date: {\n                    gte: today\n                }\n            }\n        });\n        console.log(\"Found problem:\", problem);\n        if (!problem) {\n            return res.status(404).json({\n                message: \"No problem found for today\"\n            });\n        }\n        // Generate Codeforces URL\n        const url = `https://codeforces.com/problemset/problem/${problem.contestId}/${problem.problemId}`;\n        console.log(\"Problem URL:\", url);\n        // Run scraper script\n        await new Promise((resolve, reject)=>{\n            (0,child_process__WEBPACK_IMPORTED_MODULE_2__.execFile)(\"node\", [\n                \"test.js\",\n                url\n            ], async (error)=>{\n                if (error) reject(error);\n                resolve();\n            });\n        });\n        // Read scraped data\n        const scrapedData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_4___default().readFileSync(path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"scraping1.json\"), \"utf8\"));\n        // Store this as user's problem for today\n        await prisma.dailyProblem.create({\n            data: {\n                handle,\n                rating: normalizedRating,\n                problemId: problem.problemId,\n                contestId: problem.contestId,\n                date: today\n            }\n        });\n        // Format the response with required fields\n        const formattedData = {\n            ...scrapedData,\n            contestId: problem.contestId,\n            problemId: problem.problemId,\n            rating: problem.rating\n        };\n        res.status(200).json({\n            problem: formattedData\n        });\n    } catch (error) {\n        console.error(\"Error in POTD API:\", error);\n        res.status(500).json({\n            message: \"Internal server error\",\n            error: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1lBQy9CQyxJQUFJLEVBQUU7Z0JBQ0psQyxNQUFNO2dCQUNORCxNQUFNLEVBQUVLLGdCQUFnQjtnQkFDeEJnQixTQUFTLEVBQUVSLE9BQU8sQ0FBQ1EsU0FBUztnQkFDNUJELFNBQVMsRUFBRVAsT0FBTyxDQUFDTyxTQUFTO2dCQUM1QkgsSUFBSSxFQUFFUCxLQUFLO2FBQ1o7U0FDRixDQUFDLENBQUM7UUFFSCwyQ0FBMkM7UUFDM0MsTUFBTTBCLGFBQWEsR0FBRztZQUNwQixHQUFHVixXQUFXO1lBQ2ROLFNBQVMsRUFBRVAsT0FBTyxDQUFDTyxTQUFTO1lBQzVCQyxTQUFTLEVBQUVSLE9BQU8sQ0FBQ1EsU0FBUztZQUM1QnJCLE1BQU0sRUFBRWEsT0FBTyxDQUFDYixNQUFNO1NBQ3ZCO1FBRURMLEdBQUcsQ0FBQ0UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7WUFBRWUsT0FBTyxFQUFFdUIsYUFBYTtTQUFFLENBQUMsQ0FBQztJQUNuRCxFQUFFLE9BQU9YLEtBQUssRUFBRTtRQUNkdEIsT0FBTyxDQUFDc0IsS0FBSyxDQUFDLG9CQUFvQixFQUFFQSxLQUFLLENBQUMsQ0FBQztRQUMzQzlCLEdBQUcsQ0FBQ0UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7WUFBRUMsT0FBTyxFQUFFLHVCQUF1QjtZQUFFMEIsS0FBSyxFQUFFQSxLQUFLLENBQUMxQixPQUFPO1NBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF5YmUvLi9wYWdlcy9hcGkvcG90ZC5qcz8zMDhlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcclxuaW1wb3J0IHsgZm9ybWF0TWF0aFdpdGhHZW1pbmkgfSBmcm9tICcuLi8uLi91dGlscy9nZW1pbmknO1xyXG5pbXBvcnQgeyBleGVjRmlsZSB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuXHJcbmNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcclxuICBpZiAocmVxLm1ldGhvZCAhPT0gJ1BPU1QnKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IHJhdGluZywgaGFuZGxlIH0gPSByZXEuYm9keTtcclxuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCByZXF1ZXN0OicsIHsgcmF0aW5nLCBoYW5kbGUgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWRSYXRpbmcgPSBNYXRoLm1pbigxNjAwLCBNYXRoLm1heCg4MDAsIE1hdGgucm91bmQocmF0aW5nLzEwMCkgKiAxMDApKTtcclxuICAgIGNvbnNvbGUubG9nKCdOb3JtYWxpemVkIHJhdGluZzonLCBub3JtYWxpemVkUmF0aW5nKTtcclxuICAgIFxyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcblxyXG4gICAgLy8gR2V0IHRvZGF5J3MgcHJvYmxlbSBmb3IgdGhpcyByYXRpbmdcclxuICAgIGNvbnN0IHByb2JsZW0gPSBhd2FpdCBwcmlzbWEucmF0aW5nUHJvYmxlbS5maW5kRmlyc3Qoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIHJhdGluZzogbm9ybWFsaXplZFJhdGluZyxcclxuICAgICAgICBkYXRlOiB7XHJcbiAgICAgICAgICBndGU6IHRvZGF5XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ0ZvdW5kIHByb2JsZW06JywgcHJvYmxlbSk7XHJcblxyXG4gICAgaWYgKCFwcm9ibGVtKSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdObyBwcm9ibGVtIGZvdW5kIGZvciB0b2RheScgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2VuZXJhdGUgQ29kZWZvcmNlcyBVUkxcclxuICAgIGNvbnN0IHVybCA9IGBodHRwczovL2NvZGVmb3JjZXMuY29tL3Byb2JsZW1zZXQvcHJvYmxlbS8ke3Byb2JsZW0uY29udGVzdElkfS8ke3Byb2JsZW0ucHJvYmxlbUlkfWA7XHJcbiAgICBjb25zb2xlLmxvZygnUHJvYmxlbSBVUkw6JywgdXJsKTtcclxuXHJcbiAgICAvLyBSdW4gc2NyYXBlciBzY3JpcHRcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgZXhlY0ZpbGUoJ25vZGUnLCBbJ3Rlc3QuanMnLCB1cmxdLCBhc3luYyAoZXJyb3IpID0+IHtcclxuICAgICAgICBpZiAoZXJyb3IpIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJlYWQgc2NyYXBlZCBkYXRhXHJcbiAgICBjb25zdCBzY3JhcGVkRGF0YSA9IEpTT04ucGFyc2UoXHJcbiAgICAgIGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3NjcmFwaW5nMS5qc29uJyksICd1dGY4JylcclxuICAgICk7XHJcblxyXG4gICAgLy8gU3RvcmUgdGhpcyBhcyB1c2VyJ3MgcHJvYmxlbSBmb3IgdG9kYXlcclxuICAgIGF3YWl0IHByaXNtYS5kYWlseVByb2JsZW0uY3JlYXRlKHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGhhbmRsZSxcclxuICAgICAgICByYXRpbmc6IG5vcm1hbGl6ZWRSYXRpbmcsXHJcbiAgICAgICAgcHJvYmxlbUlkOiBwcm9ibGVtLnByb2JsZW1JZCxcclxuICAgICAgICBjb250ZXN0SWQ6IHByb2JsZW0uY29udGVzdElkLFxyXG4gICAgICAgIGRhdGU6IHRvZGF5XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEZvcm1hdCB0aGUgcmVzcG9uc2Ugd2l0aCByZXF1aXJlZCBmaWVsZHNcclxuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSB7XHJcbiAgICAgIC4uLnNjcmFwZWREYXRhLFxyXG4gICAgICBjb250ZXN0SWQ6IHByb2JsZW0uY29udGVzdElkLFxyXG4gICAgICBwcm9ibGVtSWQ6IHByb2JsZW0ucHJvYmxlbUlkLFxyXG4gICAgICByYXRpbmc6IHByb2JsZW0ucmF0aW5nXHJcbiAgICB9O1xyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgcHJvYmxlbTogZm9ybWF0dGVkRGF0YSB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gUE9URCBBUEk6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJywgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJmb3JtYXRNYXRoV2l0aEdlbWluaSIsImV4ZWNGaWxlIiwicGF0aCIsImZzIiwicHJpc21hIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwicmF0aW5nIiwiaGFuZGxlIiwiYm9keSIsImNvbnNvbGUiLCJsb2ciLCJub3JtYWxpemVkUmF0aW5nIiwiTWF0aCIsIm1pbiIsIm1heCIsInJvdW5kIiwidG9kYXkiLCJEYXRlIiwic2V0SG91cnMiLCJwcm9ibGVtIiwicmF0aW5nUHJvYmxlbSIsImZpbmRGaXJzdCIsIndoZXJlIiwiZGF0ZSIsImd0ZSIsInVybCIsImNvbnRlc3RJZCIsInByb2JsZW1JZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiLCJzY3JhcGVkRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiZGFpbHlQcm9ibGVtIiwiY3JlYXRlIiwiZGF0YSIsImZvcm1hdHRlZERhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/potd.js\n");

/***/ }),

/***/ "(api)/./utils/gemini.js":
/*!*************************!*\
  !*** ./utils/gemini.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"formatMathWithGemini\": () => (/* binding */ formatMathWithGemini)\n/* harmony export */ });\nconst GEMINI_API_KEY = \"AIzaSyAYXcqJoG19elhAbYRDUdhCL6GvLMbVOCg\";\nconst API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\nasync function formatMathWithGemini(text) {\n    if (!text) return \"\";\n    try {\n        const response = await fetch(`${API_URL}?key=${GEMINI_API_KEY}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: `Given the following JSON representing a Codeforces problem statement, format it into a structured, human-readable format similar to LeetCode's problem page.\r\n\r\nFormatting Rules:\r\nTitle: Display prominently at the top.\r\nProblem Statement:\r\nConvert plain paragraphs into bullet points for clarity.\r\nDo not change or remove any information. Only restructure for better readability.\r\nMathematical Expressions:\r\nConvert all mathematical notations into LaTeX format.\r\nExample conversions:\r\n2^30 → $2^{30}$\r\na<=x<=b → $a \\leq x \\leq b$ \r\nNotes Section:\r\nIf additional information is provided, include it with proper spacing between different points for clarity.\r\nNo Extra Comments:\r\nDo not add phrases like “Here's the LaTeX code” or unnecessary explanations.\r\nOnly return the formatted output. \r\n\r\n\"AND VERY IMPORTANTLY DONT MISS ANY DETAIL FROM THE PROBLEM STATEMENT\"\r\n\r\nHERES THE TEXT TO CONVERT: \r\n\r\n${text}`\n                            }\n                        ]\n                    }\n                ]\n            })\n        });\n        const data = await response.json();\n        console.log(\"Gemini API Response:\", JSON.stringify(data, null, 2));\n        // Updated response structure handling\n        if (data.error) {\n            throw new Error(data.error.message || \"Gemini API error\");\n        }\n        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {\n            return data.candidates[0].content.parts[0].text;\n        }\n        // Fallback\n        console.error(\"Unexpected Gemini API response format:\", data);\n        return text;\n    } catch (error) {\n        console.error(\"Error calling Gemini API:\", error);\n        return text;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9nZW1pbmkuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGNBQWMsR0FBR0MseUNBQXNDO0FBQzdELE1BQU1HLE9BQU8sR0FBRywwRkFBMEY7QUFFbkcsZUFBZUMsb0JBQW9CLENBQUNDLElBQUksRUFBRTtJQUMvQyxJQUFJLENBQUNBLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUVyQixJQUFJO1FBQ0YsTUFBTUMsUUFBUSxHQUFHLE1BQU1DLEtBQUssQ0FBQyxDQUFDLEVBQUVKLE9BQU8sQ0FBQyxLQUFLLEVBQUVKLGNBQWMsQ0FBQyxDQUFDLEVBQUU7WUFDL0RTLE1BQU0sRUFBRSxNQUFNO1lBQ2RDLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsa0JBQWtCO2FBQ25DO1lBQ0RDLElBQUksRUFBRUMsSUFBSSxDQUFDQyxTQUFTLENBQUM7Z0JBQ25CQyxRQUFRLEVBQUU7b0JBQUM7d0JBQ1RDLEtBQUssRUFBRTs0QkFBQztnQ0FDTlQsSUFBSSxFQUFFLENBQUM7OztxQkF3QlY7aUJBQUM7YUFDSCxDQUFDO1NBQ0gsQ0FBQztRQUVGLE1BQU1VLElBQUksR0FBRztRQUNiRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRVAsSUFBSSxDQUFDQztRQUV6QztRQUNBLElBQUlHLElBQUk7WUFDTixNQUFNLElBQUlLLEtBQUssQ0FBQ0w7UUFDbEIsQ0FBQztRQUVELElBQUlBLElBQUksQ0FBQ08sVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUVDLE9BQU8sRUFBRVQsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUVULElBQUksRUFBRTtZQUNuRCxPQUFPVTtRQUNULENBQUM7UUFFRCxXQUFXOztRQUVYLE9BQU9WLElBQUksQ0FBQzs7UUFFWlksT0FBTyxDQUFDRSxLQUFLLENBQUM7O0lBRWhCLENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF5YmUvLi91dGlscy9nZW1pbmkuanM/MDdkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBHRU1JTklfQVBJX0tFWSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dFTUlOSV9BUElfS0VZO1xyXG5jb25zdCBBUElfVVJMID0gJ2h0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS9tb2RlbHMvZ2VtaW5pLTIuMC1mbGFzaDpnZW5lcmF0ZUNvbnRlbnQnO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZvcm1hdE1hdGhXaXRoR2VtaW5pKHRleHQpIHtcclxuICBpZiAoIXRleHQpIHJldHVybiAnJztcclxuICBcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfVVJMfT9rZXk9JHtHRU1JTklfQVBJX0tFWX1gLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGNvbnRlbnRzOiBbe1xyXG4gICAgICAgICAgcGFydHM6IFt7XHJcbiAgICAgICAgICAgIHRleHQ6IGBHaXZlbiB0aGUgZm9sbG93aW5nIEpTT04gcmVwcmVzZW50aW5nIGEgQ29kZWZvcmNlcyBwcm9ibGVtIHN0YXRlbWVudCwgZm9ybWF0IGl0IGludG8gYSBzdHJ1Y3R1cmVkLCBodW1hbi1yZWFkYWJsZSBmb3JtYXQgc2ltaWxhciB0byBMZWV0Q29kZSdzIHByb2JsZW0gcGFnZS5cclxuXHJcbkZvcm1hdHRpbmcgUnVsZXM6XHJcblRpdGxlOiBEaXNwbGF5IHByb21pbmVudGx5IGF0IHRoZSB0b3AuXHJcblByb2JsZW0gU3RhdGVtZW50OlxyXG5Db252ZXJ0IHBsYWluIHBhcmFncmFwaHMgaW50byBidWxsZXQgcG9pbnRzIGZvciBjbGFyaXR5LlxyXG5EbyBub3QgY2hhbmdlIG9yIHJlbW92ZSBhbnkgaW5mb3JtYXRpb24uIE9ubHkgcmVzdHJ1Y3R1cmUgZm9yIGJldHRlciByZWFkYWJpbGl0eS5cclxuTWF0aGVtYXRpY2FsIEV4cHJlc3Npb25zOlxyXG5Db252ZXJ0IGFsbCBtYXRoZW1hdGljYWwgbm90YXRpb25zIGludG8gTGFUZVggZm9ybWF0LlxyXG5FeGFtcGxlIGNvbnZlcnNpb25zOlxyXG4yXjMwIOKGkiAkMl57MzB9JFxyXG5hPD14PD1iIOKGkiAkYSBcXGxlcSB4IFxcbGVxIGIkIFxyXG5Ob3RlcyBTZWN0aW9uOlxyXG5JZiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGlzIHByb3ZpZGVkLCBpbmNsdWRlIGl0IHdpdGggcHJvcGVyIHNwYWNpbmcgYmV0d2VlbiBkaWZmZXJlbnQgcG9pbnRzIGZvciBjbGFyaXR5LlxyXG5ObyBFeHRyYSBDb21tZW50czpcclxuRG8gbm90IGFkZCBwaHJhc2VzIGxpa2Ug4oCcSGVyZSdzIHRoZSBMYVRlWCBjb2Rl4oCdIG9yIHVubmVjZXNzYXJ5IGV4cGxhbmF0aW9ucy5cclxuT25seSByZXR1cm4gdGhlIGZvcm1hdHRlZCBvdXRwdXQuIFxyXG5cclxuXCJBTkQgVkVSWSBJTVBPUlRBTlRMWSBET05UIE1JU1MgQU5ZIERFVEFJTCBGUk9NIFRIRSBQUk9CTEVNIFNUQVRFTUVOVFwiXHJcblxyXG5IRVJFUyBUSEUgVEVYVCBUTyBDT05WRVJUOiBcclxuXHJcbiR7dGV4dH1gXHJcbiAgICAgICAgICB9XVxyXG4gICAgICAgIH1dXHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgY29uc29sZS5sb2coJ0dlbWluaSBBUEkgUmVzcG9uc2U6JywgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMikpO1xyXG5cclxuICAgIC8vIFVwZGF0ZWQgcmVzcG9uc2Ugc3RydWN0dXJlIGhhbmRsaW5nXHJcbiAgICBpZiAoZGF0YS5lcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5lcnJvci5tZXNzYWdlIHx8ICdHZW1pbmkgQVBJIGVycm9yJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuY2FuZGlkYXRlcz8uWzBdPy5jb250ZW50Py5wYXJ0cz8uWzBdPy50ZXh0KSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmNhbmRpZGF0ZXNbMF0uY29udGVudC5wYXJ0c1swXS50ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZhbGxiYWNrXHJcbiAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIEdlbWluaSBBUEkgcmVzcG9uc2UgZm9ybWF0OicsIGRhdGEpO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhbGxpbmcgR2VtaW5pIEFQSTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gdGV4dDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkdFTUlOSV9BUElfS0VZIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0dFTUlOSV9BUElfS0VZIiwiQVBJX1VSTCIsImZvcm1hdE1hdGhXaXRoR2VtaW5pIiwidGV4dCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250ZW50cyIsInBhcnRzIiwiZGF0YSIsImpzb24iLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJjYW5kaWRhdGVzIiwiY29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./utils/gemini.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/potd.js"));
module.exports = __webpack_exports__;

})();