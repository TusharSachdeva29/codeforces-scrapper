{
  "title": "D. Inaccurate Subsequence Search",
  "statement": "Maxim has an array \na\n𝑎\n of \nn\n𝑛\n integers and an array \nb\n𝑏\n of \nm\n𝑚\n integers (\nm≤n\n𝑚\n≤\n𝑛\n).\nMaxim considers an array \nc\n𝑐\n of length \nm\n𝑚\n to be good if the elements of array \nc\n𝑐\n can be rearranged in such a way that at least \nk\n𝑘\n of them match the elements of array \nb\n𝑏\n.\nFor example, if \nb=[1,2,3,4]\n𝑏\n=\n[\n1\n,\n2\n,\n3\n,\n4\n]\n and \nk=3\n𝑘\n=\n3\n, then the arrays \n[4,1,2,3]\n[\n4\n,\n1\n,\n2\n,\n3\n]\n and \n[2,3,4,5]\n[\n2\n,\n3\n,\n4\n,\n5\n]\n are good (they can be reordered as follows: \n[1,2,3,4]\n[\n1\n,\n2\n,\n3\n,\n4\n]\n and \n[5,2,3,4]\n[\n5\n,\n2\n,\n3\n,\n4\n]\n), while the arrays \n[3,4,5,6]\n[\n3\n,\n4\n,\n5\n,\n6\n]\n and \n[3,4,3,4]\n[\n3\n,\n4\n,\n3\n,\n4\n]\n are not good.\nMaxim wants to choose every subsegment of array \na\n𝑎\n of length \nm\n𝑚\n as the elements of array \nc\n𝑐\n. Help Maxim count how many selected arrays will be good.\nIn other words, find the number of positions \n1≤l≤n−m+1\n1\n≤\n𝑙\n≤\n𝑛\n−\n𝑚\n+\n1\n such that the elements \na\nl\n,\na\nl+1\n,…,\na\nl+m−1\n𝑎\n𝑙\n,\n𝑎\n𝑙\n+\n1\n,\n…\n,\n𝑎\n𝑙\n+\n𝑚\n−\n1\n form a good array.\nThe first line contains an integer \nt\n𝑡\n (\n1≤t≤\n10\n4\n1\n≤\n𝑡\n≤\n10\n4\n) — the number of test cases.\nThe first line of each test case contains three integers \nn\n𝑛\n, \nm\n𝑚\n, and \nk\n𝑘\n (\n1≤k≤m≤n≤2⋅\n10\n5\n1\n≤\n𝑘\n≤\n𝑚\n≤\n𝑛\n≤\n2\n⋅\n10\n5\n) — the number of elements in arrays \na\n𝑎\n and \nb\n𝑏\n, the required number of matching elements.\nThe second line of each test case contains \nn\n𝑛\n integers \na\n1\n,\na\n2\n,…,\na\nn\n𝑎\n1\n,\n𝑎\n2\n,\n…\n,\n𝑎\n𝑛\n (\n1≤\na\ni\n≤\n10\n6\n1\n≤\n𝑎\n𝑖\n≤\n10\n6\n) — the elements of array \na\n𝑎\n. Elements of the array \na\n𝑎\n are not necessarily unique.\nThe third line of each test case contains \nm\n𝑚\n integers \nb\n1\n,\nb\n2\n,…,\nb\nm\n𝑏\n1\n,\n𝑏\n2\n,\n…\n,\n𝑏\n𝑚\n (\n1≤\nb\ni\n≤\n10\n6\n1\n≤\n𝑏\n𝑖\n≤\n10\n6\n) — the elements of array \nb\n𝑏\n. Elements of the array \nb\n𝑏\n are not necessarily unique.\nIt is guaranteed that the sum of \nn\n𝑛\n over all test cases does not exceed \n2⋅\n10\n5\n2\n⋅\n10\n5\n. Similarly, it is guaranteed that the sum of \nm\n𝑚\n over all test cases does not exceed \n2⋅\n10\n5\n2\n⋅\n10\n5\n.\nFor each test case, output the number of good subsegments of array \na\n𝑎\n on a separate line.\nIn the first example, all subsegments are good.\nIn the second example, good subsegments start at positions \n1\n1\n, \n2\n2\n, and \n3\n3\n.\nIn the third example, good subsegments start at positions \n1\n1\n and \n2\n2\n.",
  "inputSpec": "The first line contains an integer \nt\n𝑡\n (\n1≤t≤\n10\n4\n1\n≤\n𝑡\n≤\n10\n4\n) — the number of test cases.\nThe first line of each test case contains three integers \nn\n𝑛\n, \nm\n𝑚\n, and \nk\n𝑘\n (\n1≤k≤m≤n≤2⋅\n10\n5\n1\n≤\n𝑘\n≤\n𝑚\n≤\n𝑛\n≤\n2\n⋅\n10\n5\n) — the number of elements in arrays \na\n𝑎\n and \nb\n𝑏\n, the required number of matching elements.\nThe second line of each test case contains \nn\n𝑛\n integers \na\n1\n,\na\n2\n,…,\na\nn\n𝑎\n1\n,\n𝑎\n2\n,\n…\n,\n𝑎\n𝑛\n (\n1≤\na\ni\n≤\n10\n6\n1\n≤\n𝑎\n𝑖\n≤\n10\n6\n) — the elements of array \na\n𝑎\n. Elements of the array \na\n𝑎\n are not necessarily unique.\nThe third line of each test case contains \nm\n𝑚\n integers \nb\n1\n,\nb\n2\n,…,\nb\nm\n𝑏\n1\n,\n𝑏\n2\n,\n…\n,\n𝑏\n𝑚\n (\n1≤\nb\ni\n≤\n10\n6\n1\n≤\n𝑏\n𝑖\n≤\n10\n6\n) — the elements of array \nb\n𝑏\n. Elements of the array \nb\n𝑏\n are not necessarily unique.\nIt is guaranteed that the sum of \nn\n𝑛\n over all test cases does not exceed \n2⋅\n10\n5\n2\n⋅\n10\n5\n. Similarly, it is guaranteed that the sum of \nm\n𝑚\n over all test cases does not exceed \n2⋅\n10\n5\n2\n⋅\n10\n5\n.",
  "outputSpec": "For each test case, output the number of good subsegments of array \na\n𝑎\n on a separate line.",
  "sampleInputs": [
    "5\n7 4 2\n4 1 2 3 4 5 6\n1 2 3 4\n7 4 3\n4 1 2 3 4 5 6\n1 2 3 4\n7 4 4\n4 1 2 3 4 5 6\n1 2 3 4\n11 5 3\n9 9 2 2 10 9 7 6 3 6 3\n6 9 7 8 10\n4 1 1\n4 1 5 6\n6"
  ],
  "sampleOutputs": [
    "4\n3\n2\n4\n1"
  ],
  "note": "In the first example, all subsegments are good.\nIn the second example, good subsegments start at positions \n1\n1\n, \n2\n2\n, and \n3\n3\n.\nIn the third example, good subsegments start at positions \n1\n1\n and \n2\n2\n.",
  "images": []
}